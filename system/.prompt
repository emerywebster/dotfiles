# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${2}${s}";
  else
    return;
  fi;
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  # Solarized colors, taken from http://git.io/solarized-colors.
  black=$(tput setaf 0);
  blue=$(tput setaf 33);
  cyan=$(tput setaf 37);
  green=$(tput setaf 120);
  orange=$(tput setaf 166);
  purple=$(tput setaf 125);
  red=$(tput setaf 124);
  violet=$(tput setaf 61);
  white=$(tput setaf 15);
  yellow=$(tput setaf 136);
else
  bold='';
  reset="\e[0m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  green="\e[1;32m";
  orange="\e[1;33m";
  purple="\e[1;35m";
  red="\e[1;31m";
  violet="\e[1;35m";
  white="\e[1;37m";
  yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else
  userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="\["; # working directory base name
PS1+="\[${bold}\]\n"; # newline
# PS1+="\[${userStyle}\]\u"; # username
# PS1+="\[${white}\] at ";
# PS1+="\[${hostStyle}\]\h"; # host
# PS1+="\[${white}\] in ";
PS1+="\[${red}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${white}\] (\[${violet}\]\" \"\[${white}\])\[${blue}\]\")"; # Git repository detailsrepository details
PS1+="\n";
PS1+="\[${green}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;

#----------------------------------------------- webpro
### Prompt
#
#_bash_prompt_config() {
#
#  local USER_SYMBOL="\u"
#  local HOST_SYMBOL="\h"
#  local ESC_OPEN="\["
#  local ESC_CLOSE="\]"
#
#  if tput setaf >/dev/null 2>&1 ; then
#    _setaf () { tput setaf "$1" ; }
#    local RESET="${ESC_OPEN}$( { tput sgr0 || tput me ; } 2>/dev/null )${ESC_CLOSE}"
#    local BOLD="$( { tput bold || tput md ; } 2>/dev/null )"
#  else
#    # Fallback
#    _setaf () { echo "\033[0;$(($1+30))m" ; }
#    local RESET="\033[m"
#    local BOLD=""
#    ESC_OPEN=""
#    ESC_CLOSE=""
#  fi
#
#  # Normal colors
#  local BLACK="${ESC_OPEN}$(_setaf 0)${ESC_CLOSE}"
#  local RED="${ESC_OPEN}$(_setaf 1)${ESC_CLOSE}"
#  local GREEN="${ESC_OPEN}$(_setaf 2)${ESC_CLOSE}"
#  local YELLOW="${ESC_OPEN}$(_setaf 3)${ESC_CLOSE}"
#  local BLUE="${ESC_OPEN}$(_setaf 4)${ESC_CLOSE}"
#  local VIOLET="${ESC_OPEN}$(_setaf 5)${ESC_CLOSE}"
#  local CYAN="${ESC_OPEN}$(_setaf 6)${ESC_CLOSE}"
#  local WHITE="${ESC_OPEN}$(_setaf 7)${ESC_CLOSE}"
#
#  # Bright colors
#  local BRIGHT_GREEN="${ESC_OPEN}$(_setaf 10)${ESC_CLOSE}"
#  local BRIGHT_YELLOW="${ESC_OPEN}$(_setaf 11)${ESC_CLOSE}"
#  local BRIGHT_BLUE="${ESC_OPEN}$(_setaf 12)${ESC_CLOSE}"
#  local BRIGHT_VIOLET="${ESC_OPEN}$(_setaf 13)${ESC_CLOSE}"
#  local BRIGHT_CYAN="${ESC_OPEN}$(_setaf 14)${ESC_CLOSE}"
#  local BRIGHT_WHITE="${ESC_OPEN}$(_setaf 15)${ESC_CLOSE}"
#
#  # Bold colors
#  local BLACK_BOLD="${ESC_OPEN}${BOLD}$(_setaf 0)${ESC_CLOSE}"
#  local RED_BOLD="${ESC_OPEN}${BOLD}$(_setaf 1)${ESC_CLOSE}"
#  local GREEN_BOLD="${ESC_OPEN}${BOLD}$(_setaf 2)${ESC_CLOSE}"
#  local YELLOW_BOLD="${ESC_OPEN}${BOLD}$(_setaf 3)${ESC_CLOSE}"
#  local BLUE_BOLD="${ESC_OPEN}${BOLD}$(_setaf 4)${ESC_CLOSE}"
#  local VIOLET_BOLD="${ESC_OPEN}${BOLD}$(_setaf 5)${ESC_CLOSE}"
#  local CYAN_BOLD="${ESC_OPEN}${BOLD}$(_setaf 6)${ESC_CLOSE}"
#  local WHITE_BOLD="${ESC_OPEN}${BOLD}$(_setaf 7)${ESC_CLOSE}"
#
#  # Expose the variables we need in prompt command
#  P_USER=${BRIGHT_GREEN}${USER_SYMBOL}
#  P_HOST=${CYAN}${HOST_SYMBOL}
#  P_WHITE=${WHITE}
#  P_GREEN=${BRIGHT_GREEN}
#  P_YELLOW=${YELLOW}
#  P_RED=${RED}
#  P_RESET=${RESET}
#
#}
#
#bash_prompt_command() {
#
#  local EXIT_CODE=$?
#  local P_EXIT=""
#  local MAXLENGTH=35
#  local TRUNC_SYMBOL=".."
#  local DIR=${PWD##*/}
#  local P_PWD=${PWD/#$HOME/\~}
#
#  MAXLENGTH=$(( ( MAXLENGTH < ${#DIR} ) ? ${#DIR} : MAXLENGTH ))
#
#  local OFFSET=$(( ${#P_PWD} - MAXLENGTH ))
#
#  if [ ${OFFSET} -gt "0" ]; then
#    P_PWD=${P_PWD:$OFFSET:$MAXLENGTH}
#    P_PWD=${TRUNC_SYMBOL}/${P_PWD#*/}
#  fi
#
#  # Update terminal title
#  if [[ $TERM == xterm* ]]; then
#    echo -ne "\033]0;${P_PWD}\007"
#  fi
#
#  # Parse Git branch name
#  P_GIT=$(parse_git_branch)
#
#  # Exit code
#  if [[ $EXIT_CODE != 0 ]]; then
#    P_EXIT+="${P_RED}✘ "
#  fi
#
#  PS1="${P_EXIT}${P_USER}${P_WHITE}@${P_HOST} #${P_YELLOW}${P_PWD}${P_GREEN}${P_GIT}${P_YELLOW} ❯ ${P_RESET}"
#}
#
#parse_git_branch() {
#  local OUT=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
#  if [ "$OUT" != "" ]; then echo " $OUT"; fi
#}
#
#_bash_prompt_config
#unset _bash_prompt_config
#
#PROMPT_COMMAND=bash_prompt_command
#